Definition of the Dead Simple Language, the toy language for our
CS 6390 project.

* General Principles
*** Lisp-like syntax for code so that it can be parsed/worked with
    easily
*** Should be simple enough to be implementable, yet include enough
    functionality to reflect real programming challenges

* Features
** Ability to define variables with given types
*** Define a variable based on code
    (define var1 (initialization-code*))
*** Define a variable based on another variable
    (define var2 bar)
*** Arithmetic (for extremely basic functionality)
    (+ (init-code*) (init-code*))
    (+ var1 var2)
    (+ 3 4)
*** Files: ability to open, close, and write to files.
    (open "file-name")  =>= handle
    (write handle string)
    (close file-handle)
*** Control flow: if and while staements
*** Ability to define functions with type signatures
*** TODO Ability to type-check functions
*** "Heap-Allocated memory": (which is possible to leak)
*** TODO Lists?

This language will have an interpreter written in Python

It is imperative, programs will be lists of statements to execute.
